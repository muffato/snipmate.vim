# #!/usr/bin/perl
snippet #!
	#!/usr/bin/env perl

# Function
snippet sub
	=head2 ${1:function_name}
	
	  Example     : $${2:object_name}->$1();
	  Description : ${4:}
	  Returntype  : ${3:}
	  Exceptions  : none
	  Caller      : general
	  Status      : Stable
	
	=cut

	sub $1 {
		my $self = shift;${5}
	}

# POD
snippet pod
	=head2 ${1:function_name}
	
	  Example     : my $$1 = $${2:object_name}->$1();
	  Description : ${4:Does stuff}.
	  Returntype  : ${3:return_type}
	  Exceptions  : none
	  Caller      : general
	  Status      : Stable
	
	=cut

# Getter
snippet getter
	=head2 ${1:attrib_name}
	
	  Example     : my $$1 = $${2:object_name}->$1();
	  Description : ${4:Getter for the $1 attribute}.
	  Returntype  : ${3:return_type}
	  Exceptions  : none
	  Caller      : general
	  Status      : Stable
	
	=cut

	sub $1 {
		my $self = shift;
		return $self->{'_$1'};
	}

# Setter
snippet setter
	=head2 ${1:attrib_name}
	
	  Example     : my $$1 = $${2:object_name}->$1();
	  Example     : $$2->$1($$1);
	  Description : ${4:Getter/Setter for the $1 attribute}.
	  Returntype  : ${3:return_type}
	  Exceptions  : none
	  Caller      : general
	  Status      : Stable
	
	=cut

	sub $1 {
		my $self = shift;
		$self->{'_$1'} = shift if @_;
		return $self->{'_$1'};
	}

# Conditional
snippet if
	if (${1}) {
		${0}
	}
# Conditional if..else
snippet ife
	if (${1}) {
		${2}
	}
	else {
		${0}
	}
# Conditional if..elsif..else
snippet ifee
	if (${1}) {
		${2}
	}
	elsif (${3}) {
		${4:# elsif...}
	}
	else {
		${0}
	}
snippet eif
	elsif (${1}) {
		${0}
	}
# Conditional One-line
snippet xif
	${1:expression} if ${2:condition};
# Unless conditional
snippet unless
	unless (${1}) {
		${0}
	}
# Unless conditional One-line
snippet xunless
	${1:expression} unless ${2:condition};
# Try/Except
snippet eval
	local $@;
	eval {
		${1:# do something risky...}
	};
	if (my $e = $@) {
		${0:# handle failure...}
	}
# While Loop
snippet wh
	while (${1}) {
		${0}
	}
# While Loop One-line
snippet xwh
	${1:expression} while ${2:condition};
# C-style For Loop
snippet cfor
	for (my $${2:var} = 0; $$2 < ${1:count}; $$2${3:++}) {
		${0}
	}
# For loop one-line
snippet xfor
	${1:expression} for @${2:array};
# Foreach Loop
snippet for
	foreach my $${1:x} (@${2:array}) {
		${0}
	}
# Foreach Loop One-line
snippet fore
	${1:expression} foreach @${2:array};
# Package
snippet package
	package ${1:`expand('%:p:s?.*\(modules\|lib\)/??:r:gs?/?::?')`};

	${0}

	1;

	__END__
# strict warnings
snippet strwar
	use strict;
	use warnings;

# Anonymous subroutine
snippet asub
	sub {
		${0}
	}

# complex regex
snippet qrx
	qr/
	     ${0:regex}
	/xms

#simpler regex
snippet qr/
	qr/${0:regex}/x

# hash slice
snippet hslice
	@{ ${1:hash}  }{ ${0:array} }


# map
snippet map
	map {  ${0: body }    }  ${1: @array } ;



# Pod stub
snippet ppod
	=head1 NAME

	${1:ClassName} - ${2:ShortDesc}

	=head1 SYNOPSIS

	  use $1;

	  ${3:# synopsis...}

	=head1 DESCRIPTION

	${0:# longer description...}


	=head1 INTERFACE


	=head1 DEPENDENCIES


	=head1 SEE ALSO


# Heading for a subroutine stub
snippet psub
	=head2 ${1:MethodName}

	${0:Summary....}

# Heading for inline subroutine pod
snippet psubi
	=head2 ${1:MethodName}

	${0:Summary...}


	=cut
# inline documented subroutine
snippet subpod
	=head2 $1

	Summary of $1

	=cut

	sub ${1:subroutine_name} {
		${0}
	}
# Subroutine signature
snippet parg
	=over 2

	=item
	Arguments


	=over 3

	=item
	C<${1:DataStructure}>

	  ${2:Sample}


	=back


	=item
	Return

	=over 3


	=item
	C<${0:...return data}>


	=back


	=back


# cause failures to print stack trace
snippet debug_trace
	use Carp; # 'verbose';
	# cloak "die"
	# warn "warning"
	$SIG{'__DIE__'} = sub {
		require Carp; Carp::confess
	};

snippet dump
	use Data::Dumper;
	warn Dumper(${1:variable})

snippet subtest
	subtest '${1: test_name}' => sub {
		${2}
	};
