# #!/usr/bin/perl
snippet #!
	#!/usr/bin/env perl

# Function
snippet sub
	=head2 ${1:function_name}
	
	  Example     : $${2:object_name}->$1();
	  Description : ${4:}
	  Returntype  : ${3:}
	  Exceptions  : none
	  Caller      : general
	  Status      : Stable
	
	=cut

	sub $1 {
		my $self = shift;${5}
	}

# POD
snippet pod
	=head2 ${1:function_name}
	
	  Example     : my $$1 = $${2:object_name}->$1();
	  Description : ${4:Does stuff}.
	  Returntype  : ${3:return_type}
	  Exceptions  : none
	  Caller      : general
	  Status      : Stable
	
	=cut

# Getter
snippet getter
	=head2 ${1:attrib_name}
	
	  Example     : my $$1 = $${2:object_name}->$1();
	  Description : ${4:Getter for the $1 attribute}.
	  Returntype  : ${3:return_type}
	  Exceptions  : none
	  Caller      : general
	  Status      : Stable
	
	=cut

	sub $1 {
		my $self = shift;
		return $self->{'_$1'};
	}

# Setter
snippet setter
	=head2 ${1:attrib_name}
	
	  Example     : my $$1 = $${2:object_name}->$1();
	  Example     : $$2->$1($$1);
	  Description : ${4:Getter/Setter for the $1 attribute}.
	  Returntype  : ${3:return_type}
	  Exceptions  : none
	  Caller      : general
	  Status      : Stable
	
	=cut

	sub $1 {
		my $self = shift;
		$self->{'_$1'} = shift if @_;
		return $self->{'_$1'};
	}

# Constructor
snippet new
	use Bio::EnsEMBL::Utils::Argument;
	
	##############################
	# Constructors / Destructors #
	##############################
	
	=head2 new
	
	  Arg [1]    :
	  Arg [-XXX] : (opt) boolean (default: false)
	  Example    :
	  Description:
	  Returntype : ${1:`expand('%:p:s?.*\(modules\|lib\)/??:r:gs?/?::?')`}
	  Exceptions :
	  Caller     :
	
	=cut
	
	sub new {
	    my ($class, @args) = @_;
	
	    my $self = $class->SUPER::new(@args);
	
	    if (scalar @args) {
	        my () =
	            rearrange([qw()], @args);
	    }
	
	    return $self;
	}
	
	
	#####################
	# Object attributes #
	#####################

# Conditional
snippet if
	if (${1}) {
		${0}
	}
# Conditional if..else
snippet ife
	if (${1}) {
		${2}
	}
	else {
		${0}
	}
# Conditional if..elsif..else
snippet ifee
	if (${1}) {
		${2}
	}
	elsif (${3}) {
		${4:# elsif...}
	}
	else {
		${0}
	}
snippet eif
	elsif (${1}) {
		${0}
	}
# Conditional One-line
snippet xif
	${1:expression} if ${2:condition};
# Unless conditional
snippet unless
	unless (${1}) {
		${0}
	}
# Unless conditional One-line
snippet xunless
	${1:expression} unless ${2:condition};
# Try/Except
snippet eval
	local $@;
	eval {
		${1:# do something risky...}
	};
	if (my $e = $@) {
		${0:# handle failure...}
	}
# While Loop
snippet wh
	while (${1}) {
		${0}
	}
# While Loop One-line
snippet xwh
	${1:expression} while ${2:condition};
# C-style For Loop
snippet cfor
	for (my $${2:var} = 0; $$2 < ${1:count}; $$2${3:++}) {
		${0}
	}
# For loop one-line
snippet xfor
	${1:expression} for @${2:array};
# Foreach Loop
snippet for
	foreach my $${1:x} (@${2:array}) {
		${0}
	}
# Foreach Loop One-line
snippet fore
	${1:expression} foreach @${2:array};
# Package
snippet package
	package ${1:`expand('%:p:s?.*\(modules\|lib\)/??:r:gs?/?::?')`};

	${0}

	1;

	__END__
# strict warnings
snippet strwar
	use strict;
	use warnings;

# Anonymous subroutine
snippet asub
	sub {
		${0}
	}

# complex regex
snippet qrx
	qr/
	     ${0:regex}
	/xms

#simpler regex
snippet qr/
	qr/${0:regex}/x

# hash slice
snippet hslice
	@{ ${1:hash}  }{ ${0:array} }


# map
snippet map
	map {  ${0: body }    }  ${1: @array } ;



# Pod stub for modules
snippet ppod
	=head1 NAME

	${1:`expand('%:p:s?.*\(modules\|lib\)/??:r:gs?/?::?')`}

	=head1 SYNOPSIS

	  use $1;

	  ${3:# synopsis...}

	=head1 DESCRIPTION

	${0:# longer description...}

	=head1 SYNOPSIS

	=head1 SEE ALSO

	=head1 CONTACT
	
	Please email comments or questions to the public Ensembl
	developers list at <http://lists.ensembl.org/mailman/listinfo/dev>.
	
	Questions may also be sent to the Ensembl help desk at
	<http://www.ensembl.org/Help/Contact>.
	
	=head1 AUTHORSHIP
	
	Ensembl Team. Individual contributions can be found in the GIT log.
	
	=head1 APPENDIX
	
	The rest of the documentation details each of the object methods.
	Internal methods are usually preceded with an underscore (_)
	
	=head1 METHODS
	
	=cut

# Pod stub for scripts
snippet spod
	=head1 NAME
	
	${1:`expand('%:p:s?.*/??:r:gs?/?::?')`}
	
	=head1 AUTHORS
	
	Ensembl Team. Individual contributions can be found in the GIT log.
	
	=head1 CONTACT
	
	Please email comments or questions to the public Ensembl
	developers list at <http://lists.ensembl.org/mailman/listinfo/dev>.
	
	Questions may also be sent to the Ensembl help desk at
	<http://www.ensembl.org/Help/Contact>.
	
	=head1 DESCRIPTION
	
	=head1 SYNOPSIS
	
	  perl <FILENAME> --help
	
	  perl <FILENAME>
	    [--reg_conf registry_configuration_file]
	    --compara compara_db_name_or_alias
	
	=head1 OPTIONS
	
	=head2 GETTING HELP
	
	=over
	
	=item B<[--help]>
	
	Prints help message and exits.
	
	=back
	
	=head2 GENERAL CONFIGURATION
	
	=over
	
	=item B<[--reg_conf registry_configuration_file]>
	
	The Bio::EnsEMBL::Registry configuration file. If none given,
	the one set in ENSEMBL_REGISTRY will be used if defined, if not
	~/.ensembl_init will be used.
	
	=back
	
	=head2 DATABASES
	
	=over
	
	=item B<--compara compara_db_name_or_alias>
	
	The compara database to update. You can use either the original name or any of the
	aliases given in the registry_configuration_file
	
	=back
	
	=head2 OPTIONS
	
	=over
	
	=back
	
	=head1 INTERNAL METHODS
	
	=cut

# Apache license in modules
snippet license
	=head1 LICENSE
	
	Copyright [1999-2015] Wellcome Trust Sanger Institute and the EMBL-European Bioinformatics Institute
	Copyright [2016-<YEAR>] EMBL-European Bioinformatics Institute
	
	Licensed under the Apache License, Version 2.0 (the "License");
	you may not use this file except in compliance with the License.
	You may obtain a copy of the License at
	
	     http://www.apache.org/licenses/LICENSE-2.0
	
	Unless required by applicable law or agreed to in writing, software
	distributed under the License is distributed on an "AS IS" BASIS,
	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	See the License for the specific language governing permissions and
	limitations under the License.
	
	=cut

# Apache license in scripts
snippet slicense
	# Copyright [1999-2015] Wellcome Trust Sanger Institute and the EMBL-European Bioinformatics Institute
	# Copyright [2016-<YEAR>] EMBL-European Bioinformatics Institute
	# 
	# Licensed under the Apache License, Version 2.0 (the "License");
	# you may not use this file except in compliance with the License.
	# You may obtain a copy of the License at
	# 
	#      http://www.apache.org/licenses/LICENSE-2.0
	# 
	# Unless required by applicable law or agreed to in writing, software
	# distributed under the License is distributed on an "AS IS" BASIS,
	# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	# See the License for the specific language governing permissions and
	# limitations under the License.

# Template script
snippet script

	use Getopt::Long;
	
	use Bio::EnsEMBL::ApiVersion;
	use Bio::EnsEMBL::Registry;
	use Bio::EnsEMBL::Utils::Exception qw(throw warning verbose);
	use Bio::EnsEMBL::Utils::IO qw/:slurp/;
	use Bio::EnsEMBL::Utils::SqlHelper;
	
	use Bio::EnsEMBL::Compara::DBSQL::DBAdaptor;
	use Bio::EnsEMBL::Compara::Utils::CoreDBAdaptor;
	
	
	my $help;
	my $reg_conf;
	my $compara;
	
	GetOptions(
	    "help" => \$help,
	    "reg_conf=s" => \$reg_conf,
	    "compara=s" => \$compara,
	  );
	
	$| = 0;
	
	# Print Help and exit if help is requested
	if ($help or ()) {
	    use Pod::Usage;
	    pod2usage({-exitvalue => 0, -verbose => 2});
	}
	
	##
	## Configure the Bio::EnsEMBL::Registry
	## Uses $reg_conf if supplied. Uses ENV{ENSMEBL_REGISTRY} instead if defined. Uses
	## ~/.ensembl_init if all the previous fail.
	##
	Bio::EnsEMBL::Registry->load_all($reg_conf, 0, 0, 0, "throw_if_missing") if $reg_conf;
	
	my $compara_dba;
	if ($compara =~ /mysql:\/\//) {
	    $compara_dba = Bio::EnsEMBL::Compara::DBSQL::DBAdaptor->new(-url=>$compara);
	} else {
	    $compara_dba = Bio::EnsEMBL::Registry->get_DBAdaptor($compara, "compara");
	}
	throw ("Cannot connect to database [$compara]") if (!$compara_dba);
	my $helper = $compara_dba->dbc->sql_helper;
	
	exit(0);

# Heading for a subroutine stub
snippet psub
	=head2 ${1:MethodName}

	${0:Summary....}

# Heading for inline subroutine pod
snippet psubi
	=head2 ${1:MethodName}

	${0:Summary...}


	=cut
# inline documented subroutine
snippet subpod
	=head2 $1

	Summary of $1

	=cut

	sub ${1:subroutine_name} {
		${0}
	}
# Subroutine signature
snippet parg
	=over 2

	=item
	Arguments


	=over 3

	=item
	C<${1:DataStructure}>

	  ${2:Sample}


	=back


	=item
	Return

	=over 3


	=item
	C<${0:...return data}>


	=back


	=back


# cause failures to print stack trace
snippet debug_trace
	use Carp; # 'verbose';
	# cloak "die"
	# warn "warning"
	$SIG{'__DIE__'} = sub {
		require Carp; Carp::confess
	};

snippet dump
	use Data::Dumper;
	warn Dumper(${1:variable});
snippet subtest
	subtest '${1: test_name}' => sub {
		${2}
	};
